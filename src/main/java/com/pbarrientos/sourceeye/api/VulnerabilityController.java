package com.pbarrientos.sourceeye.api;

import java.util.List;
import java.util.stream.Collectors;

import org.apache.commons.lang3.Range;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.pbarrientos.sourceeye.data.model.Project;
import com.pbarrientos.sourceeye.data.model.Vulnerability;
import com.pbarrientos.sourceeye.data.services.ProjectService;
import com.pbarrientos.sourceeye.data.services.VulnerabilityService;
import com.pbarrientos.sourceeye.exceptions.SourceEyeServiceException;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;

/**
 * Controller class responsible of returning information about vulnerabilities
 *
 * @author Pablo Barrientos
 */
@RestController
@RequestMapping("/vulnerability")
@Api(value = "API for getting information about vulnerabilities")
public class VulnerabilityController {

    /**
     * The vulnerability service
     */
    @Autowired
    private VulnerabilityService vulnerabilityService;

    /**
     * The project service
     */
    @Autowired
    private ProjectService projectService;

    /**
     * Return information about the vulnerability with the given CVE.
     *
     * @param cve the CVE
     * @return the vulnerability
     * @throws SourceEyeServiceException in case there is an error
     * @since 0.1.0
     */
    @GetMapping(path = "/{cve}", produces = "application/json")
    @ApiOperation(value = "Find a vulnerability by its CVE")
    public Vulnerability getVulnerability(@PathVariable("cve") final String cve) throws SourceEyeServiceException {
        return this.vulnerabilityService.findByCve(cve);
    }

    /**
     * This will return all the vulnerabilities that belongs to a given CWE
     *
     * @param cwe the cwe
     * @return a list of vulnerabilities
     * @throws SourceEyeServiceException in case there is an error
     * @since 0.1.0
     */
    @GetMapping(path = "/{cwe}", produces = "application/json")
    @ApiOperation(value = "Find the vulnerabilities by CWE")
    public List<Vulnerability> getVulnerabilityByCwe(@PathVariable("cwe") final String cwe)
            throws SourceEyeServiceException {
        return this.vulnerabilityService.findByCwe(cwe);
    }

    /**
     * This will return all vulnerabilities in the database
     *
     * @return all vulnerabilities
     * @throws SourceEyeServiceException in case there is an error
     * @since 0.1.0
     */
    @GetMapping("/")
    @ApiOperation(value = "Find all vulnerabilities in the database")
    public List<Vulnerability> getAllVulnerabilities() throws SourceEyeServiceException {
        return this.vulnerabilityService.findAll();
    }

    /**
     * This will return all the vulnerabilities of a given project
     *
     * @param projectName the project qualified name
     * @return a list of vulnerabilities of the given project
     * @throws SourceEyeServiceException in case there is an error
     * @since 0.1.0
     */
    @GetMapping(path = "/project/{project}", produces = "application/json")
    @ApiOperation(value = "Find project vulnerabilities")
    public List<Vulnerability> getProjectsVulnerability(@PathVariable("project") final String projectName)
            throws SourceEyeServiceException {
        Project project = this.projectService.findByQualifiedName(projectName);
        return (List<Vulnerability>) project.getVulnerabilities();
    }

    /**
     * This will return all the vulnerabilities of a given project with a given criticality
     *
     * @param projectName the project qualified name
     * @param risk the risk. Can be either 'LOW', 'MEDIUM', 'HIGH' or 'CRITICAL'.
     * @return a list of vulnerabilities that matches the criteria
     * @throws SourceEyeServiceException in case there is an error
     * @since 0.1.0
     */
    @GetMapping(path = "/project/{project}/{risk}", produces = "application/json")
    @ApiOperation(value = "Find project vulnerabilities by risk. Risk can be either LOW, MEDIUM, HIGH or CRITICAL")
    public List<Vulnerability> getProjectsVulnerabilityByRisk(@PathVariable("project") final String projectName,
            @PathVariable("risk") final String risk) throws SourceEyeServiceException {
        Project project = this.projectService.findByQualifiedName(projectName);

        Range<Float> range;
        switch (risk) {
        case "LOW":
            range = Range.between(0f, 3f);
            break;
        case "MEDIUM":
            range = Range.between(3f, 7f);
            break;
        case "HIGH":
            range = Range.between(7f, 9f);
            break;
        case "CRITICAL":
            range = Range.between(9f, 10f);
            break;
        default:
            throw new SourceEyeServiceException("Risk is invalid");
        }

        return project.getVulnerabilities().stream().filter(vuln -> range.contains(vuln.getCvssScore()))
                .collect(Collectors.toList());

    }

}
